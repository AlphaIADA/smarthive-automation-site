generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // original (for display)
  emailLower    String?   @unique // NEW: normalized, case-insensitive key
  password      String?
  role          String    @default("USER")
  emailVerified DateTime?
  image         String?

  quotes   Quote[]
  accounts Account[]
  sessions Session[]

  @@index([emailLower])
}

model Device {
  id        String      @id @default(cuid())
  slug      String      @unique
  name      String
  category  String
  unit      String // piece, meter, etc.
  price     Decimal     @db.Decimal(10, 2)
  install   Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  QuoteItem QuoteItem[]
}

model Quote {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  title       String
  rooms       Int
  laborRate   Decimal     @db.Decimal(10, 2)
  materialTax Decimal     @db.Decimal(5, 2) // percent
  items       QuoteItem[]
  subtotal    Decimal     @db.Decimal(12, 2)
  taxTotal    Decimal     @db.Decimal(12, 2)
  laborTotal  Decimal     @db.Decimal(12, 2)
  grandTotal  Decimal     @db.Decimal(12, 2)
  createdAt   DateTime    @default(now())
}

model QuoteItem {
  id        String  @id @default(cuid())
  quote     Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId   String
  device    Device  @relation(fields: [deviceId], references: [id])
  deviceId  String
  quantity  Int
  unitCost  Decimal @db.Decimal(10, 2)
  install   Decimal @db.Decimal(10, 2)
  lineTotal Decimal @db.Decimal(12, 2)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
